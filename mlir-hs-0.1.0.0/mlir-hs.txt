-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Haskell bindings to MLIR
@package mlir-hs
@version 0.1.0.0


-- | This module defines a set of Haskell types wrapping references to
--   native C++ MLIR objects along with some basic operations on them. See
--   the submodules for more specialized components such as an
--   <a>ExecutionEngine</a> or <a>PassManager</a>.
module MLIR.Native

-- | A native MLIR context.
data Context

-- | Creates a native MLIR context.
createContext :: IO Context

-- | Destroys a native MLIR context.
destroyContext :: Context -> IO ()

-- | Wraps an IO action that gets access to a fresh MLIR context.
withContext :: (Context -> IO a) -> IO a

-- | A typeclass for retrieving MLIR contexts managing other native types.
class HasContext a

-- | Retrieve the MLIR context that manages the storage of the native
--   value.
getContext :: HasContext a => a -> IO Context

-- | Register all builtin MLIR dialects in the specified <a>Context</a>.
registerAllDialects :: Context -> IO ()

-- | Retrieve the count of dialects currently registered in the
--   <a>Context</a>.
getNumLoadedDialects :: Context -> IO Int

-- | A native MLIR location object.
data Location

-- | Create an unknown source location.
getUnknownLocation :: Context -> IO Location

-- | A native MLIR operation instance.
data Operation

-- | Retrieve the name of the given operation.
getOperationName :: Operation -> IO Identifier

-- | Show the operation using the MLIR printer.
showOperation :: Operation -> IO ByteString

-- | Check validity of the operation.
verifyOperation :: Operation -> IO Bool

-- | A native MLIR block object. Every block is a list of
--   <a>Operation</a>s.
data Block

-- | Show the block using the MLIR printer.
showBlock :: Block -> IO ByteString

-- | A native MLIR module operation. Since every module is an operation, it
--   can be converted to an <a>Operation</a> using
--   <a>moduleAsOperation</a>.
data Module

-- | Create an empty module.
createEmptyModule :: Location -> IO Module

-- | Parse a module from a string. Returns <a>Nothing</a> in case of parse
--   failure.
parseModule :: Context -> StringRef -> IO (Maybe Module)

-- | Destroy all resources associated with a <a>Module</a>.
destroyModule :: Module -> IO ()

-- | Retrieve the block containg all module definitions.
getModuleBody :: Module -> IO Block

-- | Convert a module to an <a>Operation</a>.
moduleAsOperation :: Module -> IO Operation

-- | Inverse of <a>moduleAsOperation</a>. Returns <a>Nothing</a> if the
--   operation is not a builtin MLIR module operation.
moduleFromOperation :: Operation -> IO (Maybe Module)

-- | Show the module using the MLIR printer.
showModule :: Module -> IO ByteString
data StringRef
StringRef :: Ptr CChar -> CSize -> StringRef

-- | Use a <a>ByteString</a> as a <a>StringRef</a>. This is O(n) due to
--   MLIR sometimes requiring the <a>StringRef</a>s to be null-terminated.
withStringRef :: ByteString -> (StringRef -> IO a) -> IO a

-- | A native MLIR identifier. Identifiers are strings interned in the MLIR
--   context.
data Identifier

-- | Create an identifier from a <a>StringRef</a>.
createIdentifier :: Context -> StringRef -> IO Identifier

-- | View an identifier as a <a>StringRef</a>. The result is valid for as
--   long as the <a>Context</a> managing the identifier.
identifierString :: Identifier -> IO StringRef

-- | A result code for many failable MLIR operations. The only valid cases
--   are <a>Success</a> and <a>Failure</a>.
data LogicalResult

-- | Indicates a filure of an MLIR operation. Inspect the diagnostics
--   output to find the cause of the issue.
pattern Failure :: LogicalResult

-- | Indicates a successful completion of an MLIR operation.
pattern Success :: LogicalResult

-- | Enable or disable debug logging in MLIR.
setDebugMode :: Bool -> IO ()

-- | A class for native objects that can be dumped to standard error
--   output.
class HasDump a

-- | Display the value in the standard error output.
dump :: HasDump a => a -> IO ()
instance MLIR.Native.HasDump MLIR.Native.FFI.Operation
instance MLIR.Native.HasDump MLIR.Native.FFI.Module
instance MLIR.Native.HasContext MLIR.Native.FFI.Module

module MLIR.Native.ExecutionEngine
createExecutionEngine :: Module -> IO (Maybe ExecutionEngine)
inline_c_ffi_6989586621679060063 :: Module -> IO ExecutionEngine
destroyExecutionEngine :: ExecutionEngine -> IO ()
inline_c_ffi_6989586621679060072 :: ExecutionEngine -> IO ()
withExecutionEngine :: Module -> (Maybe ExecutionEngine -> IO a) -> IO a
data SomeStorable
SomeStorable :: a -> SomeStorable
executionEngineInvoke :: forall result. Storable result => ExecutionEngine -> StringRef -> [SomeStorable] -> IO (Maybe result)
inline_c_ffi_6989586621679060661 :: ExecutionEngine -> Ptr CChar -> CSize -> Ptr (Ptr ()) -> IO LogicalResult
packStruct64 :: [SomeStorable] -> (Ptr () -> IO a) -> IO a

module MLIR.AST.Serialize
type ValueMapping = Map Name Value
type BlockMapping = Map Name Block
type ValueAndBlockMapping = (ValueMapping, BlockMapping)
class FromAST ast native | ast -> native
fromAST :: FromAST ast native => Context -> ValueAndBlockMapping -> ast -> IO native
packFromAST :: (FromAST ast native, Storable native) => Context -> ValueAndBlockMapping -> [ast] -> ContT r IO (CIntPtr, Ptr native)
packArray :: Storable a => [a] -> ContT r IO (CIntPtr, Ptr a)
unpackArray :: Storable a => CIntPtr -> Ptr a -> IO [a]

module MLIR.AST.Dialect.Affine
data Expr
Dimension :: Int -> Expr
Symbol :: Int -> Expr
Constant :: Int -> Expr
Add :: Expr -> Expr -> Expr
Mul :: Expr -> Expr -> Expr
Mod :: Expr -> Expr -> Expr
FloorDiv :: Expr -> Expr -> Expr
CeilDiv :: Expr -> Expr -> Expr
data Map
Map :: Int -> Int -> [Expr] -> Map
[mapDimensionCount] :: Map -> Int
[mapSymbolCount] :: Map -> Int
[mapExprs] :: Map -> [Expr]
inline_c_ffi_6989586621679066564 :: Context -> CIntPtr -> IO AffineExpr
inline_c_ffi_6989586621679066576 :: Context -> CIntPtr -> IO AffineExpr
inline_c_ffi_6989586621679066588 :: Context -> Int64 -> IO AffineExpr
inline_c_ffi_6989586621679066602 :: AffineExpr -> AffineExpr -> IO AffineExpr
inline_c_ffi_6989586621679066616 :: AffineExpr -> AffineExpr -> IO AffineExpr
inline_c_ffi_6989586621679066630 :: AffineExpr -> AffineExpr -> IO AffineExpr
inline_c_ffi_6989586621679066644 :: AffineExpr -> AffineExpr -> IO AffineExpr
inline_c_ffi_6989586621679066658 :: AffineExpr -> AffineExpr -> IO AffineExpr
inline_c_ffi_6989586621679066549 :: Context -> CIntPtr -> CIntPtr -> CIntPtr -> Ptr AffineExpr -> IO AffineMap
instance GHC.Classes.Eq MLIR.AST.Dialect.Affine.Expr
instance GHC.Classes.Eq MLIR.AST.Dialect.Affine.Map
instance MLIR.AST.Serialize.FromAST MLIR.AST.Dialect.Affine.Map MLIR.Native.FFI.AffineMap
instance MLIR.AST.Serialize.FromAST MLIR.AST.Dialect.Affine.Expr MLIR.Native.FFI.AffineExpr

module MLIR.AST
type Name = ByteString
type UInt = Word
data Signedness
Signed :: Signedness
Unsigned :: Signedness
Signless :: Signedness
data Type
BFloat16Type :: Type
ComplexType :: Type -> Type
Float128Type :: Type
Float16Type :: Type
Float32Type :: Type
Float64Type :: Type
Float80Type :: Type
FunctionType :: [Type] -> [Type] -> Type
IndexType :: Type
IntegerType :: Signedness -> UInt -> Type
MemRefType :: [Maybe Int] -> Type -> [Map] -> Maybe Attribute -> Type
[memrefTypeShape] :: Type -> [Maybe Int]
[memrefTypeElement] :: Type -> Type
[memrefTypeAffineMaps] :: Type -> [Map]
[memrefTypeMemorySpace] :: Type -> Maybe Attribute
NoneType :: Type
OpaqueType :: Name -> Name -> Type
[opaqueTypeNamespace] :: Type -> Name
[opaqueTypeData] :: Type -> Name
RankedTensorType :: [Maybe Int] -> Type -> Attribute -> Type
[rankedTensorTypeShape] :: Type -> [Maybe Int]
[rankedTensorTypeElement] :: Type -> Type
[rankedTensorTypeEncoding] :: Type -> Attribute
TupleType :: [Type] -> Type
UnrankedMemRefType :: Type -> Attribute -> Type
[unrankedMemrefTypeElement] :: Type -> Type
[unrankedMemrefTypeMemorySpace] :: Type -> Attribute
UnrankedTensorType :: Type -> Type
[unrankedTensorTypeElement] :: Type -> Type
VectorType :: [Int] -> Type -> Type
[vectorTypeShape] :: Type -> [Int]
[vectorTypeElement] :: Type -> Type
data Location
UnknownLocation :: Location
data Binding
Bind :: [Name] -> Operation -> Binding
pattern Do :: Operation -> Binding
pattern (:=) :: Name -> Operation -> Binding
pattern (::=) :: [Name] -> Operation -> Binding
data Block
Block :: Name -> [(Name, Type)] -> [Binding] -> Block
[blockName] :: Block -> Name
[blockArgs] :: Block -> [(Name, Type)]
[blockBody] :: Block -> [Binding]
data Region
Region :: [Block] -> Region
data Attribute
ArrayAttr :: [Attribute] -> Attribute
DictionaryAttr :: Map Name Attribute -> Attribute
FloatAttr :: Type -> Double -> Attribute
IntegerAttr :: Type -> Int -> Attribute
BoolAttr :: Bool -> Attribute
StringAttr :: ByteString -> Attribute
TypeAttr :: Type -> Attribute
AffineMapAttr :: Map -> Attribute
UnitAttr :: Attribute
DenseElementsAttr :: Type -> Vector Word32 -> Attribute
data ResultTypes
Explicit :: [Type] -> ResultTypes
Inferred :: ResultTypes
type NamedAttributes = Map Name Attribute
data AbstractOperation operand
Operation :: Name -> Location -> ResultTypes -> [operand] -> [Region] -> [Name] -> Map Name Attribute -> AbstractOperation operand
[opName] :: AbstractOperation operand -> Name
[opLocation] :: AbstractOperation operand -> Location
[opResultTypes] :: AbstractOperation operand -> ResultTypes
[opOperands] :: AbstractOperation operand -> [operand]
[opRegions] :: AbstractOperation operand -> [Region]
[opSuccessors] :: AbstractOperation operand -> [Name]
[opAttributes] :: AbstractOperation operand -> Map Name Attribute
type Operation = AbstractOperation Name
pattern NoAttrs :: Map Name Attribute
namedAttribute :: Name -> Attribute -> NamedAttributes
pattern ModuleOp :: Block -> Operation
pattern FuncAttrs :: Name -> Type -> Map Name Attribute
pattern FuncOp :: Location -> Name -> Type -> Region -> Operation
inline_c_ffi_6989586621679076373 :: Context -> IO Type
inline_c_ffi_6989586621679076381 :: Context -> IO Type
inline_c_ffi_6989586621679076389 :: Context -> IO Type
inline_c_ffi_6989586621679076397 :: Context -> IO Type
inline_c_ffi_6989586621679076407 :: Type -> IO Type
inline_c_ffi_6989586621679076429 :: Context -> CIntPtr -> Ptr Type -> CIntPtr -> Ptr Type -> IO Type
inline_c_ffi_6989586621679076437 :: Context -> IO Type
inline_c_ffi_6989586621679076450 :: Context -> CUInt -> IO Type
inline_c_ffi_6989586621679076460 :: Context -> CUInt -> IO Type
inline_c_ffi_6989586621679076470 :: Context -> CUInt -> IO Type
inline_c_ffi_6989586621679076510 :: Type -> CIntPtr -> Ptr Int64 -> Attribute -> IO Type
inline_c_ffi_6989586621679076518 :: Context -> IO Type
inline_c_ffi_6989586621679076540 :: CIntPtr -> Ptr Int64 -> Type -> Attribute -> IO Type
inline_c_ffi_6989586621679076555 :: Context -> CIntPtr -> Ptr Type -> IO Type
inline_c_ffi_6989586621679076569 :: Type -> Attribute -> IO Type
inline_c_ffi_6989586621679076579 :: Type -> IO Type
inline_c_ffi_6989586621679076597 :: CIntPtr -> Ptr Int64 -> Type -> IO Type
inline_c_ffi_6989586621679076360 :: IO Region
inline_c_ffi_6989586621679076338 :: Region -> Block -> IO ()
inline_c_ffi_6989586621679076354 :: CIntPtr -> Ptr Type -> IO Block
inline_c_ffi_6989586621679076267 :: Block -> Operation -> IO ()
inline_c_ffi_6989586621679076277 :: Block -> IO CIntPtr
inline_c_ffi_6989586621679076291 :: CIntPtr -> Ptr Value -> Block -> IO ()
inline_c_ffi_6989586621679076300 :: Operation -> IO CIntPtr
inline_c_ffi_6989586621679076314 :: CIntPtr -> Ptr Value -> Operation -> IO ()
inline_c_ffi_6989586621679076126 :: Context -> CIntPtr -> Ptr Attribute -> IO Attribute
inline_c_ffi_6989586621679076141 :: Context -> CIntPtr -> Ptr NamedAttribute -> IO Attribute
inline_c_ffi_6989586621679076157 :: Context -> Type -> CDouble -> IO Attribute
inline_c_ffi_6989586621679076171 :: Type -> Int64 -> IO Attribute
inline_c_ffi_6989586621679076183 :: Context -> CInt -> IO Attribute
inline_c_ffi_6989586621679076198 :: Context -> Ptr CChar -> CSize -> IO Attribute
inline_c_ffi_6989586621679076208 :: Type -> IO Attribute
inline_c_ffi_6989586621679076218 :: AffineMap -> IO Attribute
inline_c_ffi_6989586621679076226 :: Context -> IO Attribute
inline_c_ffi_6989586621679076243 :: Type -> CIntPtr -> Ptr Word32 -> IO Attribute
inline_c_ffi_6989586621679076106 :: Ptr CChar -> CSize -> Location -> CBool -> CIntPtr -> Ptr Type -> CIntPtr -> Ptr Value -> CIntPtr -> Ptr Region -> CIntPtr -> Ptr Block -> CIntPtr -> Ptr NamedAttribute -> IO Operation
packNamedAttrs :: Context -> ValueAndBlockMapping -> Map Name Attribute -> ContT r IO (CIntPtr, Ptr NamedAttribute)
inline_c_ffi_6989586621679076610 :: IO CSize
inline_c_ffi_6989586621679076617 :: IO CSize
inline_c_ffi_6989586621679076639 :: Ptr NamedAttribute -> CInt -> Identifier -> Attribute -> IO ()
pattern CTrue :: CBool
pattern CFalse :: CBool
notImplemented :: forall a. a
instance MLIR.AST.Serialize.FromAST MLIR.AST.Location MLIR.Native.FFI.Location
instance MLIR.AST.Serialize.FromAST MLIR.AST.Type MLIR.Native.FFI.Type
instance MLIR.AST.Serialize.FromAST MLIR.AST.Region MLIR.Native.FFI.Region
instance MLIR.AST.Serialize.FromAST MLIR.AST.Block MLIR.Native.FFI.Block
instance MLIR.AST.Serialize.FromAST MLIR.AST.Attribute MLIR.Native.FFI.Attribute
instance MLIR.AST.Serialize.FromAST MLIR.AST.Operation MLIR.Native.FFI.Operation
instance GHC.Classes.Eq MLIR.AST.Signedness
instance GHC.Classes.Eq MLIR.AST.Type
instance GHC.Classes.Eq MLIR.AST.Attribute

module MLIR.AST.PatternUtil
pattern MaybeToList :: Maybe a -> [a]
unwrapI64ArrayAttr :: Attribute -> Maybe [Int]
pattern I64ArrayAttr :: [Int] -> Attribute
unwrapAffineMapArrayAttr :: Attribute -> Maybe [Map]
pattern AffineMapArrayAttr :: [Map] -> Attribute

module MLIR.AST.Dialect.MemRef
pattern Load :: Type -> Name -> [Name] -> Operation
pattern Store :: Name -> Name -> [Name] -> Operation

module MLIR.AST.Builder
data Value
(:>) :: Name -> Type -> Value
typeOf :: Value -> Type
operand :: Value -> Name
operands :: [Value] -> [Name]
newtype NameSupply
NameSupply :: Int -> NameSupply
[nextName] :: NameSupply -> Int
newtype NameSupplyT m a
NameSupplyT :: StateT NameSupply m a -> NameSupplyT m a
class Monad m => MonadNameSupply m
freshName :: MonadNameSupply m => m Name
evalNameSupplyT :: Monad m => NameSupplyT m a -> m a
freshValue :: MonadNameSupply m => Type -> m Value
freshBlockArg :: MonadNameSupply m => Type -> m Value
data BlockBindings
BlockBindings :: SnocList Binding -> SnocList Value -> BlockBindings
[blockBindings] :: BlockBindings -> SnocList Binding
[blockArguments] :: BlockBindings -> SnocList Value
newtype BlockBuilderT m a
BlockBuilderT :: StateT BlockBindings m a -> BlockBuilderT m a
class Monad m => MonadBlockDecl m
emitOp_ :: MonadBlockDecl m => Operation -> m ()
class MonadBlockDecl m => MonadBlockBuilder m
emitOp :: MonadBlockBuilder m => Operation -> m [Value]
blockArgument :: MonadBlockBuilder m => Type -> m Value
data EndOfBlock
EndOfBlock :: EndOfBlock
terminateBlock :: Monad m => m EndOfBlock
noTerminator :: Monad m => m EndOfBlock
runBlockBuilder :: Monad m => BlockBuilderT m a -> m (a, ([Value], [Binding]))
data RegionBuilderState
RegionBuilderState :: SnocList Block -> Int -> RegionBuilderState
[blocks] :: RegionBuilderState -> SnocList Block
[nextBlockId] :: RegionBuilderState -> Int
newtype RegionBuilderT m a
RegionBuilderT :: StateT RegionBuilderState m a -> RegionBuilderT m a
type BlockName = Name
class Monad m => MonadRegionBuilder m
appendBlock :: MonadRegionBuilder m => BlockBuilderT m EndOfBlock -> m BlockName
endOfRegion :: Monad m => m ()
buildRegion :: Monad m => RegionBuilderT m () -> m Region
buildBlock :: Monad m => BlockBuilderT m EndOfBlock -> RegionBuilderT m BlockName
soleBlock :: Monad m => BlockBuilderT m EndOfBlock -> m Block
buildModule :: Monad m => BlockBuilderT m () -> m Operation
declareFunction :: MonadBlockDecl m => Name -> Type -> m ()
buildFunction :: MonadBlockDecl m => Name -> [Type] -> RegionBuilderT (NameSupplyT m) () -> m ()
buildSimpleFunction :: MonadBlockDecl m => Name -> [Type] -> BlockBuilderT (NameSupplyT m) EndOfBlock -> m ()
newtype SnocList a
SnocList :: [a] -> SnocList a
(.:.) :: SnocList a -> a -> SnocList a
unsnocList :: SnocList a -> [a]
instance Control.Monad.Writer.Class.MonadWriter w m => Control.Monad.Writer.Class.MonadWriter w (MLIR.AST.Builder.NameSupplyT m)
instance Control.Monad.Reader.Class.MonadReader r m => Control.Monad.Reader.Class.MonadReader r (MLIR.AST.Builder.NameSupplyT m)
instance Control.Monad.Fix.MonadFix m => Control.Monad.Fix.MonadFix (MLIR.AST.Builder.NameSupplyT m)
instance Control.Monad.Trans.Class.MonadTrans MLIR.AST.Builder.NameSupplyT
instance GHC.Base.Monad m => GHC.Base.Monad (MLIR.AST.Builder.NameSupplyT m)
instance GHC.Base.Monad m => GHC.Base.Applicative (MLIR.AST.Builder.NameSupplyT m)
instance GHC.Base.Functor m => GHC.Base.Functor (MLIR.AST.Builder.NameSupplyT m)
instance Control.Monad.Writer.Class.MonadWriter w m => Control.Monad.Writer.Class.MonadWriter w (MLIR.AST.Builder.RegionBuilderT m)
instance Control.Monad.Reader.Class.MonadReader r m => Control.Monad.Reader.Class.MonadReader r (MLIR.AST.Builder.RegionBuilderT m)
instance Control.Monad.Fix.MonadFix m => Control.Monad.Fix.MonadFix (MLIR.AST.Builder.RegionBuilderT m)
instance Control.Monad.Trans.Class.MonadTrans MLIR.AST.Builder.RegionBuilderT
instance GHC.Base.Monad m => GHC.Base.Monad (MLIR.AST.Builder.RegionBuilderT m)
instance GHC.Base.Monad m => GHC.Base.Applicative (MLIR.AST.Builder.RegionBuilderT m)
instance GHC.Base.Functor m => GHC.Base.Functor (MLIR.AST.Builder.RegionBuilderT m)
instance Control.Monad.Writer.Class.MonadWriter w m => Control.Monad.Writer.Class.MonadWriter w (MLIR.AST.Builder.BlockBuilderT m)
instance Control.Monad.Reader.Class.MonadReader r m => Control.Monad.Reader.Class.MonadReader r (MLIR.AST.Builder.BlockBuilderT m)
instance Control.Monad.Fix.MonadFix m => Control.Monad.Fix.MonadFix (MLIR.AST.Builder.BlockBuilderT m)
instance Control.Monad.Trans.Class.MonadTrans MLIR.AST.Builder.BlockBuilderT
instance GHC.Base.Monad m => GHC.Base.Monad (MLIR.AST.Builder.BlockBuilderT m)
instance GHC.Base.Monad m => GHC.Base.Applicative (MLIR.AST.Builder.BlockBuilderT m)
instance GHC.Base.Functor m => GHC.Base.Functor (MLIR.AST.Builder.BlockBuilderT m)
instance Control.Monad.State.Class.MonadState s m => Control.Monad.State.Class.MonadState s (MLIR.AST.Builder.BlockBuilderT m)
instance GHC.Base.Monad m => MLIR.AST.Builder.MonadBlockDecl (MLIR.AST.Builder.BlockBuilderT m)
instance MLIR.AST.Builder.MonadNameSupply m => MLIR.AST.Builder.MonadBlockBuilder (MLIR.AST.Builder.BlockBuilderT m)
instance GHC.Base.Semigroup MLIR.AST.Builder.BlockBindings
instance GHC.Base.Monoid MLIR.AST.Builder.BlockBindings
instance Control.Monad.State.Class.MonadState s m => Control.Monad.State.Class.MonadState s (MLIR.AST.Builder.RegionBuilderT m)
instance GHC.Base.Semigroup (MLIR.AST.Builder.SnocList a)
instance GHC.Base.Monoid (MLIR.AST.Builder.SnocList a)
instance MLIR.AST.Builder.MonadNameSupply m => MLIR.AST.Builder.MonadNameSupply (Control.Monad.Trans.Reader.ReaderT r m)
instance GHC.Base.Monad m => MLIR.AST.Builder.MonadNameSupply (MLIR.AST.Builder.NameSupplyT m)
instance Control.Monad.State.Class.MonadState s m => Control.Monad.State.Class.MonadState s (MLIR.AST.Builder.NameSupplyT m)

module MLIR.AST.Rewrite
type RewriteBuilderT m = BlockBuilderT (RewriteT m)
type OpRewriteM m = Operation -> RewriteBuilderT m RewriteResult
type OpRewrite = OpRewriteM Identity
data RewriteResult
Replace :: [Value] -> RewriteResult
Skip :: RewriteResult
Traverse :: RewriteResult
pattern ReplaceOne :: Value -> RewriteResult
applyClosedOpRewrite :: OpRewrite -> Operation -> Operation
applyClosedOpRewriteT :: MonadFix m => OpRewriteM m -> Operation -> m Operation

module MLIR.AST.Dialect.X86Vector

-- | A pattern for <tt>x86vector.avx.intr.dp.ps.256</tt>.
pattern DotIntr :: Location -> Type -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx.intr.dp.ps.256</tt>.
avx_intr_dp_ps_256 :: MonadBlockBuilder m => Type -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>x86vector.avx.intr.dot</tt>.
pattern Dot :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx.intr.dot</tt>.
avx_intr_dot :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>x86vector.avx512.intr.mask.compress</tt>.
pattern MaskCompressIntr :: Location -> Type -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx512.intr.mask.compress</tt>.
avx512_intr_mask_compress :: MonadBlockBuilder m => Type -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>x86vector.avx512.mask.rndscale</tt>.
pattern MaskRndScale :: Location -> Type -> operand -> operand -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx512.mask.rndscale</tt>.
avx512_mask_rndscale :: MonadBlockBuilder m => Type -> Value -> Value -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>x86vector.avx512.intr.mask.rndscale.pd.512</tt>.
pattern MaskRndScalePDIntr :: Location -> Type -> operand -> operand -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx512.intr.mask.rndscale.pd.512</tt>.
avx512_intr_mask_rndscale_pd_512 :: MonadBlockBuilder m => Type -> Value -> Value -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>x86vector.avx512.intr.mask.rndscale.ps.512</tt>.
pattern MaskRndScalePSIntr :: Location -> Type -> operand -> operand -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx512.intr.mask.rndscale.ps.512</tt>.
avx512_intr_mask_rndscale_ps_512 :: MonadBlockBuilder m => Type -> Value -> Value -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>x86vector.avx512.mask.scalef</tt>.
pattern MaskScaleF :: Location -> Type -> operand -> operand -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx512.mask.scalef</tt>.
avx512_mask_scalef :: MonadBlockBuilder m => Type -> Value -> Value -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>x86vector.avx512.intr.mask.scalef.pd.512</tt>.
pattern MaskScaleFPDIntr :: Location -> Type -> operand -> operand -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx512.intr.mask.scalef.pd.512</tt>.
avx512_intr_mask_scalef_pd_512 :: MonadBlockBuilder m => Type -> Value -> Value -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>x86vector.avx512.intr.mask.scalef.ps.512</tt>.
pattern MaskScaleFPSIntr :: Location -> Type -> operand -> operand -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx512.intr.mask.scalef.ps.512</tt>.
avx512_intr_mask_scalef_ps_512 :: MonadBlockBuilder m => Type -> Value -> Value -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>x86vector.avx.intr.rsqrt.ps.256</tt>.
pattern RsqrtIntr :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx.intr.rsqrt.ps.256</tt>.
avx_intr_rsqrt_ps_256 :: MonadBlockBuilder m => Value -> m Value

-- | A pattern for <tt>x86vector.avx.rsqrt</tt>.
pattern Rsqrt :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx.rsqrt</tt>.
avx_rsqrt :: MonadBlockBuilder m => Value -> m Value

-- | A pattern for <tt>x86vector.avx512.intr.vp2intersect.d.512</tt>.
pattern Vp2IntersectDIntr :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx512.intr.vp2intersect.d.512</tt>.
avx512_intr_vp2intersect_d_512 :: MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>x86vector.avx512.vp2intersect</tt>.
pattern Vp2Intersect :: Location -> Type -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx512.vp2intersect</tt>.
avx512_vp2intersect :: MonadBlockBuilder m => Type -> Type -> Value -> Value -> m [Value]

-- | A pattern for <tt>x86vector.avx512.intr.vp2intersect.q.512</tt>.
pattern Vp2IntersectQIntr :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>x86vector.avx512.intr.vp2intersect.q.512</tt>.
avx512_intr_vp2intersect_q_512 :: MonadBlockBuilder m => Type -> Value -> Value -> m Value

module MLIR.AST.Dialect.Vector
data IteratorType
Parallel :: IteratorType
Reduction :: IteratorType
pattern Contract :: Location -> Type -> Name -> Name -> Name -> Map -> Map -> Map -> [IteratorType] -> Operation
pattern ContractAttrs :: Map -> Map -> Map -> [IteratorType] -> NamedAttributes
pattern IteratorAttrs :: [IteratorType] -> Attribute
showIterator :: IteratorType -> ByteString
itersFromAttribute :: Attribute -> Maybe [IteratorType]

-- | A pattern for <tt>vector.bitcast</tt>.
pattern BitCast :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>vector.bitcast</tt>.
bitcast :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>vector.broadcast</tt>.
pattern Broadcast :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>vector.broadcast</tt>.
broadcast :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A builder for <tt>vector.compressstore</tt>.
compressstore :: MonadBlockBuilder m => Value -> [Value] -> Value -> Value -> m ()

-- | A pattern for <tt>vector.constant_mask</tt>.
pattern ConstantMask :: Location -> Type -> [Int] -> AbstractOperation operand

-- | A builder for <tt>vector.constant_mask</tt>.
constant_mask :: MonadBlockBuilder m => Type -> [Int] -> m Value

-- | A builder for <tt>vector.contract</tt>.
contract :: MonadBlockBuilder m => Type -> Value -> Value -> Value -> [Value] -> [Map] -> [Attribute] -> m Value

-- | A pattern for <tt>vector.create_mask</tt>.
pattern CreateMask :: Location -> Type -> [operand] -> AbstractOperation operand

-- | A builder for <tt>vector.create_mask</tt>.
create_mask :: MonadBlockBuilder m => Type -> [Value] -> m Value

-- | A builder for <tt>vector.expandload</tt>.
expandload :: MonadBlockBuilder m => Type -> Value -> [Value] -> Value -> Value -> m Value

-- | A pattern for <tt>vector.extractelement</tt>.
pattern ExtractElement :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>vector.extractelement</tt>.
extractelement :: MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A builder for <tt>vector.extract_map</tt>.
extract_map :: MonadBlockBuilder m => Type -> Value -> [Value] -> m Value

-- | A pattern for <tt>vector.extract</tt>.
pattern Extract :: Location -> Type -> operand -> [Int] -> AbstractOperation operand

-- | A builder for <tt>vector.extract</tt>.
extract :: MonadBlockBuilder m => Type -> Value -> [Int] -> m Value

-- | A pattern for <tt>vector.extract_slices</tt>.
pattern ExtractSlices :: Location -> Type -> operand -> [Int] -> [Int] -> AbstractOperation operand

-- | A builder for <tt>vector.extract_slices</tt>.
extract_slices :: MonadBlockBuilder m => Type -> Value -> [Int] -> [Int] -> m Value

-- | A pattern for <tt>vector.extract_strided_slice</tt>.
pattern ExtractStridedSlice :: Location -> Type -> operand -> [Int] -> [Int] -> [Int] -> AbstractOperation operand

-- | A builder for <tt>vector.extract_strided_slice</tt>.
extract_strided_slice :: MonadBlockBuilder m => Type -> Value -> [Int] -> [Int] -> [Int] -> m Value

-- | A pattern for <tt>vector.fma</tt>.
pattern FMA :: Location -> Type -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>vector.fma</tt>.
fma :: MonadBlockBuilder m => Type -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>vector.flat_transpose</tt>.
pattern FlatTranspose :: Location -> Type -> operand -> Int -> Int -> AbstractOperation operand

-- | A builder for <tt>vector.flat_transpose</tt>.
flat_transpose :: MonadBlockBuilder m => Type -> Value -> Int -> Int -> m Value

-- | A builder for <tt>vector.gather</tt>.
gather :: MonadBlockBuilder m => Type -> Value -> [Value] -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>vector.insertelement</tt>.
pattern InsertElement :: Location -> Type -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>vector.insertelement</tt>.
insertelement :: MonadBlockBuilder m => Type -> Value -> Value -> Value -> m Value

-- | A builder for <tt>vector.insert_map</tt>.
insert_map :: MonadBlockBuilder m => Type -> Value -> Value -> [Value] -> m Value

-- | A pattern for <tt>vector.insert</tt>.
pattern Insert :: Location -> Type -> operand -> operand -> [Int] -> AbstractOperation operand

-- | A builder for <tt>vector.insert</tt>.
insert :: MonadBlockBuilder m => Type -> Value -> Value -> [Int] -> m Value

-- | A pattern for <tt>vector.insert_slices</tt>.
pattern InsertSlices :: Location -> Type -> operand -> [Int] -> [Int] -> AbstractOperation operand

-- | A builder for <tt>vector.insert_slices</tt>.
insert_slices :: MonadBlockBuilder m => Type -> Value -> [Int] -> [Int] -> m Value

-- | A pattern for <tt>vector.insert_strided_slice</tt>.
pattern InsertStridedSlice :: Location -> Type -> operand -> operand -> [Int] -> [Int] -> AbstractOperation operand

-- | A builder for <tt>vector.insert_strided_slice</tt>.
insert_strided_slice :: MonadBlockBuilder m => Type -> Value -> Value -> [Int] -> [Int] -> m Value

-- | A builder for <tt>vector.load</tt>.
load :: MonadBlockBuilder m => Type -> Value -> [Value] -> m Value

-- | A builder for <tt>vector.maskedload</tt>.
maskedload :: MonadBlockBuilder m => Type -> Value -> [Value] -> Value -> Value -> m Value

-- | A builder for <tt>vector.maskedstore</tt>.
maskedstore :: MonadBlockBuilder m => Value -> [Value] -> Value -> Value -> m ()

-- | A pattern for <tt>vector.matrix_multiply</tt>.
pattern Matmul :: Location -> Type -> operand -> operand -> Int -> Int -> Int -> AbstractOperation operand

-- | A builder for <tt>vector.matrix_multiply</tt>.
matrix_multiply :: MonadBlockBuilder m => Type -> Value -> Value -> Int -> Int -> Int -> m Value

-- | A builder for <tt>vector.outerproduct</tt>.
outerproduct :: MonadBlockBuilder m => Type -> Value -> Value -> [Value] -> m Value

-- | A pattern for <tt>vector.print</tt>.
pattern Print :: Location -> operand -> AbstractOperation operand

-- | A builder for <tt>vector.print</tt>.
print :: MonadBlockBuilder m => Value -> m ()

-- | A builder for <tt>vector.reduction</tt>.
reduction :: MonadBlockBuilder m => Type -> Value -> [Value] -> ByteString -> m Value

-- | A builder for <tt>vector.scatter</tt>.
scatter :: MonadBlockBuilder m => Value -> [Value] -> Value -> Value -> Value -> m ()

-- | A pattern for <tt>vector.shape_cast</tt>.
pattern ShapeCast :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>vector.shape_cast</tt>.
shape_cast :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>vector.shuffle</tt>.
pattern Shuffle :: Location -> Type -> operand -> operand -> [Int] -> AbstractOperation operand

-- | A builder for <tt>vector.shuffle</tt>.
shuffle :: MonadBlockBuilder m => Type -> Value -> Value -> [Int] -> m Value

-- | A builder for <tt>vector.store</tt>.
store :: MonadBlockBuilder m => Value -> Value -> [Value] -> m ()

-- | A pattern for <tt>vector.transpose</tt>.
pattern Transpose :: Location -> Type -> operand -> [Int] -> AbstractOperation operand

-- | A builder for <tt>vector.transpose</tt>.
transpose :: MonadBlockBuilder m => Type -> Value -> [Int] -> m Value

-- | A pattern for <tt>vector.tuple</tt>.
pattern Tuple :: Location -> Type -> [operand] -> AbstractOperation operand

-- | A builder for <tt>vector.tuple</tt>.
tuple :: MonadBlockBuilder m => Type -> [Value] -> m Value

-- | A pattern for <tt>vector.type_cast</tt>.
pattern TypeCast :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>vector.type_cast</tt>.
type_cast :: MonadBlockBuilder m => Type -> Value -> m Value

module MLIR.AST.Dialect.Std
pattern Branch :: Location -> BlockName -> [Name] -> Operation
br :: MonadBlockBuilder m => BlockName -> [Value] -> m EndOfBlock
cond_br :: MonadBlockBuilder m => Value -> BlockName -> [Value] -> BlockName -> [Value] -> m EndOfBlock

-- | A pattern for <tt>std.absf</tt>.
pattern AbsF :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>std.absf</tt>.
absf :: MonadBlockBuilder m => Value -> m Value

-- | A pattern for <tt>std.addf</tt>.
pattern AddF :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.addf</tt>.
addf :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>std.addi</tt>.
pattern AddI :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.addi</tt>.
addi :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>std.and</tt>.
pattern And :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.and</tt>.
and :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>std.assert</tt>.
pattern Assert :: Location -> operand -> ByteString -> AbstractOperation operand

-- | A builder for <tt>std.assert</tt>.
assert :: MonadBlockBuilder m => Value -> ByteString -> m ()

-- | A pattern for <tt>std.atomic_yield</tt>.
pattern AtomicYield :: Location -> operand -> AbstractOperation operand

-- | A builder for <tt>std.atomic_yield</tt>.
atomic_yield :: MonadBlockBuilder m => Value -> m EndOfBlock

-- | A builder for <tt>std.call_indirect</tt>.
call_indirect :: MonadBlockBuilder m => [Type] -> Value -> [Value] -> m Value

-- | A pattern for <tt>std.ceilf</tt>.
pattern CeilF :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>std.ceilf</tt>.
ceilf :: MonadBlockBuilder m => Value -> m Value

-- | A pattern for <tt>std.constant</tt>.
pattern Constant :: Location -> Type -> Attribute -> AbstractOperation operand

-- | A builder for <tt>std.constant</tt>.
constant :: MonadBlockBuilder m => Type -> Attribute -> m Value

-- | A pattern for <tt>std.copysign</tt>.
pattern CopySign :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.copysign</tt>.
copysign :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>std.divf</tt>.
pattern DivF :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.divf</tt>.
divf :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>std.fpext</tt>.
pattern FPExt :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>std.fpext</tt>.
fpext :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>std.fptosi</tt>.
pattern FPToSI :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>std.fptosi</tt>.
fptosi :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>std.fptoui</tt>.
pattern FPToUI :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>std.fptoui</tt>.
fptoui :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>std.fptrunc</tt>.
pattern FPTrunc :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>std.fptrunc</tt>.
fptrunc :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>std.floorf</tt>.
pattern FloorF :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>std.floorf</tt>.
floorf :: MonadBlockBuilder m => Value -> m Value

-- | A pattern for <tt>std.fmaf</tt>.
pattern FmaF :: Location -> Type -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.fmaf</tt>.
fmaf :: MonadBlockBuilder m => Value -> Value -> Value -> m Value

-- | A pattern for <tt>std.index_cast</tt>.
pattern IndexCast :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>std.index_cast</tt>.
index_cast :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>std.mulf</tt>.
pattern MulF :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.mulf</tt>.
mulf :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>std.muli</tt>.
pattern MulI :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.muli</tt>.
muli :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>std.negf</tt>.
pattern NegF :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>std.negf</tt>.
negf :: MonadBlockBuilder m => Value -> m Value

-- | A pattern for <tt>std.or</tt>.
pattern Or :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.or</tt>.
or :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>std.rank</tt>.
pattern Rank :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>std.rank</tt>.
rank :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>std.remf</tt>.
pattern RemF :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.remf</tt>.
remf :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>std.return</tt>.
pattern Return :: Location -> [operand] -> AbstractOperation operand

-- | A builder for <tt>std.return</tt>.
return :: MonadBlockBuilder m => [Value] -> m EndOfBlock

-- | A pattern for <tt>std.sitofp</tt>.
pattern SIToFP :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>std.sitofp</tt>.
sitofp :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>std.select</tt>.
pattern Select :: Location -> Type -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.select</tt>.
select :: MonadBlockBuilder m => Type -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>std.shift_left</tt>.
pattern ShiftLeft :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.shift_left</tt>.
shift_left :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>std.sexti</tt>.
pattern SignExtendI :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>std.sexti</tt>.
sexti :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>std.ceildivi_signed</tt>.
pattern SignedCeilDivI :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.ceildivi_signed</tt>.
ceildivi_signed :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>std.divi_signed</tt>.
pattern SignedDivI :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.divi_signed</tt>.
divi_signed :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>std.floordivi_signed</tt>.
pattern SignedFloorDivI :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.floordivi_signed</tt>.
floordivi_signed :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>std.remi_signed</tt>.
pattern SignedRemI :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.remi_signed</tt>.
remi_signed :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>std.shift_right_signed</tt>.
pattern SignedShiftRight :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.shift_right_signed</tt>.
shift_right_signed :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>std.splat</tt>.
pattern Splat :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>std.splat</tt>.
splat :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>std.subf</tt>.
pattern SubF :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.subf</tt>.
subf :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>std.subi</tt>.
pattern SubI :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.subi</tt>.
subi :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>std.trunci</tt>.
pattern TruncateI :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>std.trunci</tt>.
trunci :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>std.uitofp</tt>.
pattern UIToFP :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>std.uitofp</tt>.
uitofp :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>std.divi_unsigned</tt>.
pattern UnsignedDivI :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.divi_unsigned</tt>.
divi_unsigned :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>std.remi_unsigned</tt>.
pattern UnsignedRemI :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.remi_unsigned</tt>.
remi_unsigned :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>std.shift_right_unsigned</tt>.
pattern UnsignedShiftRight :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.shift_right_unsigned</tt>.
shift_right_unsigned :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>std.xor</tt>.
pattern XOr :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>std.xor</tt>.
xor :: MonadBlockBuilder m => Value -> Value -> m Value

-- | A pattern for <tt>std.zexti</tt>.
pattern ZeroExtendI :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>std.zexti</tt>.
zexti :: MonadBlockBuilder m => Type -> Value -> m Value

module MLIR.AST.Dialect.Shape

-- | A pattern for <tt>shape.add</tt>.
pattern Add :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.add</tt>.
add :: MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>shape.any</tt>.
pattern Any :: Location -> Type -> [operand] -> AbstractOperation operand

-- | A builder for <tt>shape.any</tt>.
any :: MonadBlockBuilder m => Type -> [Value] -> m Value

-- | A pattern for <tt>shape.assuming_all</tt>.
pattern AssumingAll :: Location -> Type -> [operand] -> AbstractOperation operand

-- | A builder for <tt>shape.assuming_all</tt>.
assuming_all :: MonadBlockBuilder m => Type -> [Value] -> m Value

-- | A pattern for <tt>shape.assuming_yield</tt>.
pattern AssumingYield :: Location -> [operand] -> AbstractOperation operand

-- | A builder for <tt>shape.assuming_yield</tt>.
assuming_yield :: MonadBlockBuilder m => [Value] -> m EndOfBlock

-- | A pattern for <tt>shape.broadcast</tt>.
pattern Broadcast :: Location -> Type -> [operand] -> ByteString -> AbstractOperation operand

-- | A builder for <tt>shape.broadcast</tt>.
broadcast :: MonadBlockBuilder m => Type -> [Value] -> ByteString -> m Value

-- | A pattern for <tt>shape.concat</tt>.
pattern Concat :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.concat</tt>.
concat :: MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>shape.const_size</tt>.
pattern ConstSize :: Location -> Type -> Int -> AbstractOperation operand

-- | A builder for <tt>shape.const_size</tt>.
const_size :: MonadBlockBuilder m => Type -> Int -> m Value

-- | A pattern for <tt>shape.const_witness</tt>.
pattern ConstWitness :: Location -> Type -> Bool -> AbstractOperation operand

-- | A builder for <tt>shape.const_witness</tt>.
const_witness :: MonadBlockBuilder m => Type -> Bool -> m Value

-- | A pattern for <tt>shape.cstr_broadcastable</tt>.
pattern CstrBroadcastable :: Location -> Type -> [operand] -> AbstractOperation operand

-- | A builder for <tt>shape.cstr_broadcastable</tt>.
cstr_broadcastable :: MonadBlockBuilder m => Type -> [Value] -> m Value

-- | A pattern for <tt>shape.cstr_eq</tt>.
pattern CstrEq :: Location -> Type -> [operand] -> AbstractOperation operand

-- | A builder for <tt>shape.cstr_eq</tt>.
cstr_eq :: MonadBlockBuilder m => Type -> [Value] -> m Value

-- | A pattern for <tt>shape.cstr_require</tt>.
pattern CstrRequire :: Location -> Type -> operand -> ByteString -> AbstractOperation operand

-- | A builder for <tt>shape.cstr_require</tt>.
cstr_require :: MonadBlockBuilder m => Type -> Value -> ByteString -> m Value

-- | A pattern for <tt>shape.debug_print</tt>.
pattern DebugPrint :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.debug_print</tt>.
debug_print :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>shape.div</tt>.
pattern Div :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.div</tt>.
div :: MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>shape.from_extent_tensor</tt>.
pattern FromExtentTensor :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.from_extent_tensor</tt>.
from_extent_tensor :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>shape.from_extents</tt>.
pattern FromExtents :: Location -> Type -> [operand] -> AbstractOperation operand

-- | A builder for <tt>shape.from_extents</tt>.
from_extents :: MonadBlockBuilder m => Type -> [Value] -> m Value

-- | A pattern for <tt>shape.get_extent</tt>.
pattern GetExtent :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.get_extent</tt>.
get_extent :: MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>shape.index_to_size</tt>.
pattern IndexToSize :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.index_to_size</tt>.
index_to_size :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>shape.is_broadcastable</tt>.
pattern IsBroadcastable :: Location -> Type -> [operand] -> AbstractOperation operand

-- | A builder for <tt>shape.is_broadcastable</tt>.
is_broadcastable :: MonadBlockBuilder m => Type -> [Value] -> m Value

-- | A pattern for <tt>shape.join</tt>.
pattern Join :: Location -> Type -> operand -> operand -> ByteString -> AbstractOperation operand

-- | A builder for <tt>shape.join</tt>.
join :: MonadBlockBuilder m => Type -> Value -> Value -> ByteString -> m Value

-- | A pattern for <tt>shape.max</tt>.
pattern Max :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.max</tt>.
max :: MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>shape.min</tt>.
pattern Min :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.min</tt>.
min :: MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>shape.mul</tt>.
pattern Mul :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.mul</tt>.
mul :: MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>shape.num_elements</tt>.
pattern NumElements :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.num_elements</tt>.
num_elements :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>shape.rank</tt>.
pattern Rank :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.rank</tt>.
rank :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>shape.shape_eq</tt>.
pattern ShapeEq :: Location -> Type -> [operand] -> AbstractOperation operand

-- | A builder for <tt>shape.shape_eq</tt>.
shape_eq :: MonadBlockBuilder m => Type -> [Value] -> m Value

-- | A pattern for <tt>shape.shape_of</tt>.
pattern ShapeOf :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.shape_of</tt>.
shape_of :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>shape.size_to_index</tt>.
pattern SizeToIndex :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.size_to_index</tt>.
size_to_index :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>shape.split_at</tt>.
pattern SplitAt :: Location -> Type -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.split_at</tt>.
split_at :: MonadBlockBuilder m => Type -> Type -> Value -> Value -> m [Value]

-- | A pattern for <tt>shape.to_extent_tensor</tt>.
pattern ToExtentTensor :: Location -> Type -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.to_extent_tensor</tt>.
to_extent_tensor :: MonadBlockBuilder m => Type -> Value -> m Value

-- | A pattern for <tt>shape.with_shape</tt>.
pattern With :: Location -> Type -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>shape.with_shape</tt>.
with_shape :: MonadBlockBuilder m => Type -> Value -> Value -> m Value

-- | A pattern for <tt>shape.yield</tt>.
pattern Yield :: Location -> [operand] -> AbstractOperation operand

-- | A builder for <tt>shape.yield</tt>.
yield :: MonadBlockBuilder m => [Value] -> m EndOfBlock

module MLIR.AST.Dialect.Linalg

-- | A pattern for <tt>linalg.init_tensor</tt>.
pattern Linalg_InitTensor :: Location -> Type -> [operand] -> [Int] -> AbstractOperation operand

-- | A builder for <tt>linalg.init_tensor</tt>.
init_tensor :: MonadBlockBuilder m => Type -> [Value] -> [Int] -> m Value

-- | A pattern for <tt>linalg.range</tt>.
pattern Linalg_Range :: Location -> Type -> operand -> operand -> operand -> AbstractOperation operand

-- | A builder for <tt>linalg.range</tt>.
range :: MonadBlockBuilder m => Type -> Value -> Value -> Value -> m Value

-- | A pattern for <tt>linalg.yield</tt>.
pattern Linalg_Yield :: Location -> [operand] -> AbstractOperation operand

-- | A builder for <tt>linalg.yield</tt>.
yield :: MonadBlockBuilder m => [Value] -> m EndOfBlock

module MLIR.Native.Pass
createPassManager :: Context -> IO PassManager
inline_c_ffi_6989586621679282302 :: Context -> IO PassManager
destroyPassManager :: PassManager -> IO ()
inline_c_ffi_6989586621679282311 :: PassManager -> IO ()
withPassManager :: Context -> (PassManager -> IO a) -> IO a
runPasses :: PassManager -> Module -> IO LogicalResult
inline_c_ffi_6989586621679282324 :: PassManager -> Module -> IO LogicalResult
addConvertStandardToLLVMPass :: PassManager -> IO ()
inline_c_ffi_6989586621679282333 :: PassManager -> IO ()
addConvertVectorToLLVMPass :: PassManager -> IO ()
inline_c_ffi_6989586621679282342 :: PassManager -> IO ()
